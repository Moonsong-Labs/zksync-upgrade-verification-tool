// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface IProtocolUpgradeHandler$Type {
  _format: "hh-sol-artifact-1";
  contractName: "IProtocolUpgradeHandler";
  sourceName: "contracts/zk-gov/l1-contracts/src/interfaces/IProtocolUpgradeHandler.sol";
  abi: [
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "_emergencyUpgradeBoardBefore";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_emergencyUpgradeBoardAfter";
          type: "address";
        },
      ];
      name: "ChangeEmergencyUpgradeBoard";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "_guardiansBefore";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_guardiansAfter";
          type: "address";
        },
      ];
      name: "ChangeGuardians";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "_securityCouncilBefore";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "_securityCouncilAfter";
          type: "address";
        },
      ];
      name: "ChangeSecurityCouncil";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "EmergencyUpgradeExecuted";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "_protocolFrozenUntil";
          type: "uint256";
        },
      ];
      name: "HardFreeze";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [];
      name: "ReinforceFreeze";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "_chainId";
          type: "uint256";
        },
      ];
      name: "ReinforceFreezeOneChain";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [];
      name: "ReinforceUnfreeze";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "_chainId";
          type: "uint256";
        },
      ];
      name: "ReinforceUnfreezeOneChain";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: false;
          internalType: "uint256";
          name: "_protocolFrozenUntil";
          type: "uint256";
        },
      ];
      name: "SoftFreeze";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [];
      name: "Unfreeze";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "UpgradeApprovedByGuardians";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "UpgradeApprovedBySecurityCouncil";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "UpgradeExecuted";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "UpgradeLegalVetoExtended";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
        {
          components: [
            {
              components: [
                {
                  internalType: "address";
                  name: "target";
                  type: "address";
                },
                {
                  internalType: "uint256";
                  name: "value";
                  type: "uint256";
                },
                {
                  internalType: "bytes";
                  name: "data";
                  type: "bytes";
                },
              ];
              internalType: "struct IProtocolUpgradeHandler.Call[]";
              name: "calls";
              type: "tuple[]";
            },
            {
              internalType: "address";
              name: "executor";
              type: "address";
            },
            {
              internalType: "bytes32";
              name: "salt";
              type: "bytes32";
            },
          ];
          indexed: false;
          internalType: "struct IProtocolUpgradeHandler.UpgradeProposal";
          name: "_proposal";
          type: "tuple";
        },
      ];
      name: "UpgradeStarted";
      type: "event";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "approveUpgradeGuardians";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "approveUpgradeSecurityCouncil";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          components: [
            {
              components: [
                {
                  internalType: "address";
                  name: "target";
                  type: "address";
                },
                {
                  internalType: "uint256";
                  name: "value";
                  type: "uint256";
                },
                {
                  internalType: "bytes";
                  name: "data";
                  type: "bytes";
                },
              ];
              internalType: "struct IProtocolUpgradeHandler.Call[]";
              name: "calls";
              type: "tuple[]";
            },
            {
              internalType: "address";
              name: "executor";
              type: "address";
            },
            {
              internalType: "bytes32";
              name: "salt";
              type: "bytes32";
            },
          ];
          internalType: "struct IProtocolUpgradeHandler.UpgradeProposal";
          name: "_proposal";
          type: "tuple";
        },
      ];
      name: "execute";
      outputs: [];
      stateMutability: "payable";
      type: "function";
    },
    {
      inputs: [
        {
          components: [
            {
              components: [
                {
                  internalType: "address";
                  name: "target";
                  type: "address";
                },
                {
                  internalType: "uint256";
                  name: "value";
                  type: "uint256";
                },
                {
                  internalType: "bytes";
                  name: "data";
                  type: "bytes";
                },
              ];
              internalType: "struct IProtocolUpgradeHandler.Call[]";
              name: "calls";
              type: "tuple[]";
            },
            {
              internalType: "address";
              name: "executor";
              type: "address";
            },
            {
              internalType: "bytes32";
              name: "salt";
              type: "bytes32";
            },
          ];
          internalType: "struct IProtocolUpgradeHandler.UpgradeProposal";
          name: "_proposal";
          type: "tuple";
        },
      ];
      name: "executeEmergencyUpgrade";
      outputs: [];
      stateMutability: "payable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "extendLegalVeto";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "hardFreeze";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "reinforceFreeze";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "_chainId";
          type: "uint256";
        },
      ];
      name: "reinforceFreezeOneChain";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "reinforceUnfreeze";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "_chainId";
          type: "uint256";
        },
      ];
      name: "reinforceUnfreezeOneChain";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "softFreeze";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "uint256";
          name: "_l2BatchNumber";
          type: "uint256";
        },
        {
          internalType: "uint256";
          name: "_l2MessageIndex";
          type: "uint256";
        },
        {
          internalType: "uint16";
          name: "_l2TxNumberInBatch";
          type: "uint16";
        },
        {
          internalType: "bytes32[]";
          name: "_proof";
          type: "bytes32[]";
        },
        {
          components: [
            {
              components: [
                {
                  internalType: "address";
                  name: "target";
                  type: "address";
                },
                {
                  internalType: "uint256";
                  name: "value";
                  type: "uint256";
                },
                {
                  internalType: "bytes";
                  name: "data";
                  type: "bytes";
                },
              ];
              internalType: "struct IProtocolUpgradeHandler.Call[]";
              name: "calls";
              type: "tuple[]";
            },
            {
              internalType: "address";
              name: "executor";
              type: "address";
            },
            {
              internalType: "bytes32";
              name: "salt";
              type: "bytes32";
            },
          ];
          internalType: "struct IProtocolUpgradeHandler.UpgradeProposal";
          name: "_proposal";
          type: "tuple";
        },
      ];
      name: "startUpgrade";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "unfreeze";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_newEmergencyUpgradeBoard";
          type: "address";
        },
      ];
      name: "updateEmergencyUpgradeBoard";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_newGuardians";
          type: "address";
        },
      ];
      name: "updateGuardians";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "_newSecurityCouncil";
          type: "address";
        },
      ];
      name: "updateSecurityCouncil";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "bytes32";
          name: "_id";
          type: "bytes32";
        },
      ];
      name: "upgradeState";
      outputs: [
        {
          internalType: "enum IProtocolUpgradeHandler.UpgradeState";
          name: "";
          type: "uint8";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
  ];
  bytecode: "0x";
  deployedBytecode: "0x";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "IProtocolUpgradeHandler",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/zk-gov/l1-contracts/src/interfaces/IProtocolUpgradeHandler.sol:IProtocolUpgradeHandler",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "IProtocolUpgradeHandler",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/zk-gov/l1-contracts/src/interfaces/IProtocolUpgradeHandler.sol:IProtocolUpgradeHandler",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "IProtocolUpgradeHandler",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/zk-gov/l1-contracts/src/interfaces/IProtocolUpgradeHandler.sol:IProtocolUpgradeHandler",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IProtocolUpgradeHandler$Type["abi"]>>;
}
