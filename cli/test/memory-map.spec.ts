import { describe, expect, it } from "vitest";
import { BlockExplorerClient, RpcClient, StorageChanges } from "../src";
import fs from "node:fs/promises";
import path from "node:path";
import { memoryDiffParser } from "../src";
import {
  bytesToBigInt,
  bytesToHex,
  type Hex,
  hexToBigInt,
  hexToBytes,
  numberToBytes,
  numberToHex,
  zeroAddress
} from "viem";
import { AddressType } from "../src/lib/storage/types/address-type";
import { StructType } from "../src/lib/storage/types/struct-type";
import { BigNumberType } from "../src/lib/storage/types/big-number-type";
import { ContractField } from "../src/lib/storage/contractField";
import { BooleanType } from "../src/lib/storage/types/boolean-type";
import type { StorageVisitor } from "../src/lib/reports/storage-visitor";
import { type PropertyChange } from "../src/lib/storage/property-change";
import type { StorageValue } from "../src/lib/storage/values/storage-value";
import type { ValueField } from "../src/lib/storage/values/struct-value";
import { Option } from "nochoices";
import { Diamond } from "../src/lib/diamond";
import { z } from "zod";

class TestReport implements StorageVisitor<string> {
  beforeData: Option<string>;
  afterData: Option<string>;

  constructor() {
    this.beforeData = Option.None();
    this.afterData = Option.None();
  }

  before(): Option<string> {
    return this.beforeData;
  }

  after(): Option<string> {
    return this.afterData;
  }

  checkProp(change: PropertyChange): void {
    change.before
      .map((v) => v.accept(this))
      .ifSome((str) => {
        this.beforeData.replace(str);
      });

    change.after
      .map((v) => v.accept(this))
      .ifSome((str) => {
        this.afterData.replace(str);
      });
  }

  visitAddress(addr: Hex): string {
    return addr.toLowerCase();
  }

  visitArray(inner: StorageValue[]): string {
    return inner.map((v, i) => `[${i}]: ${v.accept(this)}`).join("\n");
  }

  visitBigNumber(n: bigint): string {
    return n.toString();
  }

  visitBoolean(val: boolean): string {
    return val.toString();
  }

  visitBuf(buf: Buffer): string {
    return bytesToHex(buf);
  }

  visitEmpty(): string {
    return "No content.";
  }

  visitStruct(fields: ValueField[]): string {
    return fields
      .map(({ key, value }) => {
        return `${key}=>${value.accept(this)}`;
      })
      .join(", ");
  }

  visitMapping(fields: ValueField[]): string {
    return fields
      .map(({ key, value }) => {
        return `[${key}]: ${value.accept(this)}`;
      })
      .join("\n");
  }
}

describe("MemoryMap", () => {
  const subject = async (file: string, selectors: Hex[] = [], facets: Hex[] = []) => {
    const diff = await fs.readFile(path.join(import.meta.dirname, "data", file));
    const json = memoryDiffParser.parse(JSON.parse(diff.toString()));
    return new StorageChanges(
      json,
      "0x32400084c286cf3e17e7b677ea9583e60a000324",
      selectors,
      facets
    );
  };

  const scenario = async (
    file: string,
    changeName: string,
    selectors: Hex[] = [],
    facets: Hex[] = []
  ): Promise<TestReport> => {
    const memory = await subject(file, selectors, facets);
    const maybeValue = await memory.changeFor(changeName);
    const test = new TestReport();
    const value = maybeValue.unwrap();
    test.checkProp(value);
    return test;
  };

  it("can extract value change for a simple hash value", async () => {
    const test = await scenario(
      "realistic-memory-diff.json",
      "ZkSyncHyperchainBase.s.l2DefaultAccountBytecodeHash"
    );

    expect(test.before().unwrap()).to.eql(
      "0x0100055b041eb28aff6e3a6e0f37c31fd053fc9ef142683b05e5f0aee6934066"
    );
    expect(test.after().unwrap()).to.eql(
      "0x01000563374c277a2c1e34659a2a1e87371bb6d852ce142022d497bfb50b9e32"
    );
  });

  it("can extract value change that is an address", async () => {
    const test = await scenario("realistic-memory-diff.json", "ZkSyncHyperchainBase.s.verifier");

    expect(test.before().unwrap().toLowerCase()).to.eql(
      "0xdd9C826196cf3510B040A8784D85aE36674c7Ed2".toLowerCase()
    );
    expect(test.after().unwrap().toLowerCase()).to.eql(
      "0x9D6c59D9A234F585B367b4ba3C62e5Ec7A6179FD".toLowerCase()
    );
  });

  it("can extract value change for fixed array", async () => {
    const test = await scenario(
      "change-in-deprecated-facets-array.json",
      "ZkSyncHyperchainBase.s.__DEPRECATED_diamondCutStorage"
    );

    const beforeLines = test.before().unwrap().split("\n");

    expect(beforeLines).to.eql([
      "[0]: 0x1000000000000000000000000000000000000000",
      "[1]: 0x2000000000000000000000000000000000000000",
      "[2]: 0x3000000000000000000000000000000000000000",
      "[3]: 0x4000000000000000000000000000000000000000",
      "[4]: 0x5000000000000000000000000000000000000000",
      "[5]: 0x6000000000000000000000000000000000000000",
      "[6]: 0x7000000000000000000000000000000000000000",
    ]);

    const afterLines = test.after().unwrap().split("\n");
    expect(afterLines).to.eql([
      "[0]: 0x1111111111111111111111111111111111111111",
      "[1]: 0x2222222222222222222222222222222222222222",
      "[2]: 0x3333333333333333333333333333333333333333",
      "[3]: 0x4444444444444444444444444444444444444444",
      "[4]: 0x5555555555555555555555555555555555555555",
      "[5]: 0x6666666666666666666666666666666666666666",
      "[6]: 0x7777777777777777777777777777777777777777",
    ]);
  });

  it("can display verifier param changes", async () => {
    const test = await scenario(
      "realistic-memory-diff.json",
      "ZkSyncHyperchainBase.s.__DEPRECATED_verifierParams"
    );

    const beforeLines = test.before().unwrap();
    expect(beforeLines).toMatch(
      /recursionNodeLevelVkHash=>0x5a3ef282b21e12fe1f4438e5bb158fc5060b160559c5158c6389d62d9fe3d080/
    );
    expect(beforeLines).toMatch(
      /recursionLeafLevelVkHash=>0x400a4b532c6f072c00d1806ef299300d4c104f4ac55bd8698ade78894fcadc0a/
    );
    expect(beforeLines).toMatch(/recursionCircuitsSetVksHash=>No content./);

    const afterLines = test.after().unwrap();
    expect(afterLines).toMatch(
      /recursionNodeLevelVkHash=>0xf520cd5b37e74e19fdb369c8d676a04dce8a19457497ac6686d2bb95d94109c8/
    );
    expect(afterLines).toMatch(
      /recursionLeafLevelVkHash=>0x435202d277dd06ef3c64ddd99fda043fc27c2bd8b7c66882966840202c27f4f6/
    );
    expect(afterLines).toMatch(/recursionCircuitsSetVksHash=>No content./);
  });

  it("can display big numbers", async () => {
    const test = await scenario(
      "realistic-memory-diff.json",
      "ZkSyncHyperchainBase.s.protocolVersion"
    );

    expect(test.before().unwrap()).to.eql("22");
    expect(test.after().unwrap()).to.eql("24");
  });

  // it('test mapping keys', () => {
  //   const mapSlot = "0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b"
  //   const key = "0x0e18b681"
  //   const mapSlotBytes = hexToBytes(mapSlot, {size: 32})
  //   const keyBytes = hexToBytes(key, {size: 32})
  //   const buf = Buffer.concat([keyBytes, mapSlotBytes]);
  //
  //   const value = keccak256(buf)
  //   expect(value).to.eql("0x02a257d44d183668a0c30e9d57fecdb34cf2d5f9fbb4a7ae8491d04bf23a7439")
  // })

  it("can display mappings", async () => {
    const test = await scenario("realistic-memory-diff.json", "DiamondStorage.selectorToFacet", [
      "0x0e18b681",
    ]);

    const beforeLines = test.before().unwrap();

    expect(beforeLines).toEqual(
      "[0x0e18b681]: facetAddress=>0x230214f0224c7e0485f348a79512ad00514db1f7, selectorPosition=>0, isFreezable=>false"
    );

    const afterLines = test.after().unwrap();
    expect(afterLines).toEqual(
      "[0x0e18b681]: facetAddress=>0x342a09385e9bad4ad32a6220765a6c333552e565, selectorPosition=>0, isFreezable=>false"
    );
  });

  it("can display multiple mappings", async () => {
    const test = await scenario("realistic-memory-diff.json", "DiamondStorage.selectorToFacet", [
      "0x0e18b681",
      "0x64bf8d66",
      "0x52ef6b2c",
      "0x6c0960f9",
    ]);

    const beforeLines = test.before().unwrap().split("\n");

    expect(beforeLines).toHaveLength(4);
    expect(beforeLines).toEqual(
      expect.arrayContaining([
        "[0x0e18b681]: facetAddress=>0x230214f0224c7e0485f348a79512ad00514db1f7, selectorPosition=>0, isFreezable=>false",
        "[0x64bf8d66]: facetAddress=>0x230214f0224c7e0485f348a79512ad00514db1f7, selectorPosition=>2, isFreezable=>false",
        "[0x52ef6b2c]: facetAddress=>0x10113bb3a8e64f8ed67003126adc8ce74c34610c, selectorPosition=>1, isFreezable=>false",
        "[0x6c0960f9]: facetAddress=>0xa57f9ffd65fc0f5792b5e958df42399a114ec7e7, selectorPosition=>0, isFreezable=>true",
      ])
    );

    const afterLines = test
      .after()
      .unwrap()
      .split("\n")
      .map((l) => l.toLowerCase());
    expect(afterLines).toHaveLength(4);
    expect(afterLines).toEqual(
      expect.arrayContaining([
        "[0x0e18b681]: facetAddress=>0x342a09385e9bad4ad32a6220765a6c333552e565, selectorPosition=>0, isFreezable=>false".toLowerCase(),
        "[0x64bf8d66]: facetAddress=>0x342a09385e9bad4ad32a6220765a6c333552e565, selectorPosition=>1, isFreezable=>false".toLowerCase(),
        "[0x52ef6b2c]: facetAddress=>0x345c6ca2f3e08445614f4299001418f125ad330a, selectorPosition=>3, isFreezable=>false".toLowerCase(),
        "[0x6c0960f9]: facetAddress=>0x7814399116c17f2750ca99cbfd2b75ba9a0793d7, selectorPosition=>1, isFreezable=>true".toLowerCase(),
      ])
    );
  });

  it("can display variable arrays", async () => {
    const test = await scenario("realistic-memory-diff.json", "DiamondStorage.facets", []);

    const before = test
      .before()
      .unwrap()
      .split("\n")
      .map((addr) => addr.toLowerCase());
    expect(before).toHaveLength(4);
    expect(before).toEqual([
      "[0]: 0x230214F0224C7E0485f348a79512ad00514DB1F7".toLowerCase(),
      "[1]: 0x10113bB3a8e64f8eD67003126adC8CE74C34610c".toLowerCase(),
      "[2]: 0xA57F9FFD65fC0F5792B5e958dF42399a114EC7e7".toLowerCase(),
      "[3]: 0xfd3779e6214eBBd40f5F5890351298e123A46BA6".toLowerCase(),
    ]);

    const after = test
      .after()
      .unwrap()
      .split("\n")
      .map((addr) => addr.toLowerCase());
    expect(after).toHaveLength(4);
    expect(after).toEqual([
      "[0]: 0x342a09385E9BAD4AD32a6220765A6c333552e565".toLowerCase(),
      "[1]: 0x345c6ca2F3E08445614f4299001418F125AD330a".toLowerCase(),
      "[2]: 0x7814399116C17F2750Ca99cBFD2b75bA9a0793d7".toLowerCase(),
      "[3]: 0x1a451d9bFBd176321966e9bc540596Ca9d39B4B1".toLowerCase(),
    ]);
  });

  it("can display DiamondStorage.facetToSelectors correctly", async () => {
    const test = await scenario(
      "realistic-memory-diff.json",
      "DiamondStorage.facetToSelectors",
      [],
      ["0x230214f0224c7e0485f348a79512ad00514db1f7"]
    );
    expect(test.before().isSome()).toBe(true);
  });

  it("can display structs correctly", async () => {
    const diff = await fs.readFile(
      path.join(import.meta.dirname, "data", "realistic-memory-diff.json")
    );
    const json = memoryDiffParser.parse(JSON.parse(diff.toString()));
    const prop = new ContractField(
      "myStruct",
      hexToBigInt("0xf78707ba12ab026e6a86b731b9d6b0fc0e151ddd06be4f9f8e940a8fa89bb893"),
      "Some struct",
      new StructType([
        {
          name: "facetAddress",
          type: new AddressType(),
        },
        {
          name: "selectorPosition",
          type: new BigNumberType(2),
        },
        {
          name: "isFreezable",
          type: new BooleanType(),
        },
      ])
    );

    const map = new StorageChanges(
      json,
      "0x32400084c286cf3e17e7b677ea9583e60a000324",
      [],
      [],
      [prop]
    );

    const change = (await map.changeFor("myStruct")).unwrap();

    const test = new TestReport();
    test.checkProp(change);

    expect(test.before().unwrap().toLowerCase()).toEqual(
      "facetAddress=>0xA57F9FFD65fC0F5792B5e958dF42399a114EC7e7, selectorPosition=>3, isFreezable=>true".toLowerCase()
    );
    expect(test.after().unwrap().toLowerCase()).toEqual(
      "facetAddress=>0x7814399116C17F2750Ca99cBFD2b75bA9a0793d7, selectorPosition=>4, isFreezable=>true".toLowerCase()
    );
  });

  it("DELETEME", async () => {
    const rpc = new RpcClient("https://mainnet.gateway.tenderly.co/1ooZXz5grkFD15LMjKrVC0")
    const explorer = BlockExplorerClient.forL1("IA817WPSNENBAK9EE3SNM1C5C31YUTZ4MV", "mainnet")
    const callAddr = "0x32400084c286cf3e17e7b677ea9583e60a000324";
    const diamond = new Diamond(callAddr)
    await diamond.init(explorer, rpc)

    const currentFacets = diamond.allFacets()

    const callData = "0xa9f6d94100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000d719fca4433646cbd86f6b073ee364d36b856b1d000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000124000000000000000000000000000000000000000000000000000000000000013e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b0e18b68100000000000000000000000000000000000000000000000000000000e58bb6390000000000000000000000000000000000000000000000000000000064bf8d6600000000000000000000000000000000000000000000000000000000a9f6d9410000000000000000000000000000000000000000000000000000000027ae4c16000000000000000000000000000000000000000000000000000000004dd18bf500000000000000000000000000000000000000000000000000000000f235757f000000000000000000000000000000000000000000000000000000001cc5d10300000000000000000000000000000000000000000000000000000000be6f11cf000000000000000000000000000000000000000000000000000000004623c91d00000000000000000000000000000000000000000000000000000000173389450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000021cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed6270000000000000000000000000000000000000000000000000000000079823c9a000000000000000000000000000000000000000000000000000000004fc07d7500000000000000000000000000000000000000000000000000000000d86970d800000000000000000000000000000000000000000000000000000000fd791f3c00000000000000000000000000000000000000000000000000000000e5355c75000000000000000000000000000000000000000000000000000000009d1b5a81000000000000000000000000000000000000000000000000000000007b30c8da000000000000000000000000000000000000000000000000000000008665b15000000000000000000000000000000000000000000000000000000000631f4bac000000000000000000000000000000000000000000000000000000000ec6b0b70000000000000000000000000000000000000000000000000000000033ce93fe00000000000000000000000000000000000000000000000000000000db1f0bf900000000000000000000000000000000000000000000000000000000b8c2f66f00000000000000000000000000000000000000000000000000000000ef3f0bae00000000000000000000000000000000000000000000000000000000fe26699e000000000000000000000000000000000000000000000000000000003960738200000000000000000000000000000000000000000000000000000000af6a2dcd00000000000000000000000000000000000000000000000000000000a1954fc50000000000000000000000000000000000000000000000000000000046657fe90000000000000000000000000000000000000000000000000000000018e3a9410000000000000000000000000000000000000000000000000000000029b98c6700000000000000000000000000000000000000000000000000000000bd7c541200000000000000000000000000000000000000000000000000000000c3bbd2d700000000000000000000000000000000000000000000000000000000e81e0ba100000000000000000000000000000000000000000000000000000000facd743b000000000000000000000000000000000000000000000000000000009cd939e40000000000000000000000000000000000000000000000000000000056142d7a00000000000000000000000000000000000000000000000000000000b22dd78e0000000000000000000000000000000000000000000000000000000074f4d30d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000066c0960f900000000000000000000000000000000000000000000000000000000b473318e00000000000000000000000000000000000000000000000000000000042901c700000000000000000000000000000000000000000000000000000000263b7f8e00000000000000000000000000000000000000000000000000000000e4948f4300000000000000000000000000000000000000000000000000000000eb6724190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004701f58c500000000000000000000000000000000000000000000000000000000c3d93e7c000000000000000000000000000000000000000000000000000000007f61885c0000000000000000000000000000000000000000000000000000000097c09d3400000000000000000000000000000000000000000000000000000000000000000000000000000000f6f26b416ce7ae5e5fe224be332c7ae4e1f3450a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d0e18b6810000000000000000000000000000000000000000000000000000000064bf8d6600000000000000000000000000000000000000000000000000000000a9f6d9410000000000000000000000000000000000000000000000000000000027ae4c16000000000000000000000000000000000000000000000000000000004dd18bf5000000000000000000000000000000000000000000000000000000001cc5d10300000000000000000000000000000000000000000000000000000000be6f11cf00000000000000000000000000000000000000000000000000000000e76db86500000000000000000000000000000000000000000000000000000000235d9eb50000000000000000000000000000000000000000000000000000000021f603d7000000000000000000000000000000000000000000000000000000004623c91d000000000000000000000000000000000000000000000000000000001733894500000000000000000000000000000000000000000000000000000000fc57565f00000000000000000000000000000000000000000000000000000000000000000000000000000000e60e94fccb18a81d501a38959e532c0a85a1be8900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000291de72e3400000000000000000000000000000000000000000000000000000000ea6c029c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed627000000000000000000000000000000000000000000000000000000006e9960c30000000000000000000000000000000000000000000000000000000098acd7a600000000000000000000000000000000000000000000000000000000086a56f8000000000000000000000000000000000000000000000000000000003591c1a00000000000000000000000000000000000000000000000000000000079823c9a00000000000000000000000000000000000000000000000000000000d86970d800000000000000000000000000000000000000000000000000000000fd791f3c00000000000000000000000000000000000000000000000000000000e5355c75000000000000000000000000000000000000000000000000000000009d1b5a81000000000000000000000000000000000000000000000000000000007b30c8da00000000000000000000000000000000000000000000000000000000d046815600000000000000000000000000000000000000000000000000000000631f4bac000000000000000000000000000000000000000000000000000000000ec6b0b70000000000000000000000000000000000000000000000000000000033ce93fe0000000000000000000000000000000000000000000000000000000006d49e5b00000000000000000000000000000000000000000000000000000000f5c1182c000000000000000000000000000000000000000000000000000000005518c73b00000000000000000000000000000000000000000000000000000000db1f0bf900000000000000000000000000000000000000000000000000000000b8c2f66f00000000000000000000000000000000000000000000000000000000ef3f0bae00000000000000000000000000000000000000000000000000000000fe26699e000000000000000000000000000000000000000000000000000000003960738200000000000000000000000000000000000000000000000000000000af6a2dcd00000000000000000000000000000000000000000000000000000000a1954fc50000000000000000000000000000000000000000000000000000000046657fe90000000000000000000000000000000000000000000000000000000018e3a9410000000000000000000000000000000000000000000000000000000029b98c6700000000000000000000000000000000000000000000000000000000bd7c541200000000000000000000000000000000000000000000000000000000c3bbd2d700000000000000000000000000000000000000000000000000000000e81e0ba100000000000000000000000000000000000000000000000000000000facd743b000000000000000000000000000000000000000000000000000000009cd939e40000000000000000000000000000000000000000000000000000000056142d7a00000000000000000000000000000000000000000000000000000000b22dd78e0000000000000000000000000000000000000000000000000000000074f4d30d00000000000000000000000000000000000000000000000000000000000000000000000000000000cdb6228b616eef8df47d69a372c4f725c43e718c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000812f43dab000000000000000000000000000000000000000000000000000000006c0960f900000000000000000000000000000000000000000000000000000000b473318e00000000000000000000000000000000000000000000000000000000042901c700000000000000000000000000000000000000000000000000000000263b7f8e00000000000000000000000000000000000000000000000000000000e4948f4300000000000000000000000000000000000000000000000000000000eb67241900000000000000000000000000000000000000000000000000000000c924de3500000000000000000000000000000000000000000000000000000000000000000000000000000000ad193ade635576d8e9f7ada71af2137b16c640750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008701f58c5000000000000000000000000000000000000000000000000000000006edd4f1200000000000000000000000000000000000000000000000000000000c3d93e7c000000000000000000000000000000000000000000000000000000006f497ac6000000000000000000000000000000000000000000000000000000007f61885c00000000000000000000000000000000000000000000000000000000c37533bb0000000000000000000000000000000000000000000000000000000097c09d34000000000000000000000000000000000000000000000000000000000f23da43000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0408284e57000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000001ac0010008e742608b21bf7eb23c1a9d0602047e3618b464c9b59c0fba3b3d7ab66e01000563374c277a2c1e34659a2a1e87371bb6d852ce142022d497bfb50b9e3200000000000000000000000070f3fbf8a427155185ec90bed8a3434203de9604f520cd5b37e74e19fdb369c8d676a04dce8a19457497ac6686d2bb95d94109c8f9664f4324c1400fa5c3822d667f30e873f53f1b8033180cd15fe41c1e2355c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ae00000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000066615060000000000000000000000000000000000000000000000000000000180000000100000000000000000000000000000000000000000000000000000000000000fe0000000000000000000000000000000000000000000000000000000000008007000000000000000000000000000000000000000000000000000000000000800600000000000000000000000000000000000000000000000000000000044aac000000000000000000000000000000000000000000000000000000000000018e0000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000019200000000000000000000000000000000000000000000000000000000000001624e9f18c1700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000aa00000000000000000000000000000000000000000000000000000000000000b600000000000000000000000000000000000000000000000000000000000000c200000000000000000000000000000000000000000000000000000000000000ce00000000000000000000000000000000000000000000000000000000000000da00000000000000000000000000000000000000000000000000000000000000e600000000000000000000000000000000000000000000000000000000000000f200000000000000000000000000000000000000000000000000000000000000fe000000000000000000000000000000000000000000000000000000000000010a00000000000000000000000000000000000000000000000000000000000001160000000000000000000000000000000000000000000000000000000000000122000000000000000000000000000000000000000000000000000000000000012e000000000000000000000000000000000000000000000000000000000000013a0000000000000000000000000000000000000000000000000000000000000146000000000000000000000000000000000000000000000000000000000000015200100000781e55a60f3f14fd7dd67e3c8caab896b7b0fca4a662583959299eede00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100001112e34172b2bc31574d155893a087a1cf4b608cf9895a2201ea7bd6ee00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100001752dc8a1a374a6346781205017b7b594d97c28812265865f3a45fcb4500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010000872dd7e2dc1b34416c174086aa84fd80c78acc7b670214da955bd5572800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010000bd8bd7ab008f76e359dc296ff5fe0e8a95fedce1d570943e90143acdfd00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000001000f1b3432a32f9fba2115f5dd3b0ee8127e7bf2c609d57d3e231f19119c4300000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100000781e55a60f3f14fd7dd67e3c8caab896b7b0fca4a662583959299eede00000000000000000000000000000000000000000000000000000000000080010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100007549287362e4263ea5b204f01fc3c7f2ac09d71e6eb21029698220f01a00000000000000000000000000000000000000000000000000000000000080020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010000e563d4ad7b4822cc19d8f74f2c41ee3d3153379be4b02b27d4498d52b600000000000000000000000000000000000000000000000000000000000080030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100007d82d4a2eb62e539e3c89cc641f507132b247022ba05ef1ddfed2b007300000000000000000000000000000000000000000000000000000000000080040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100003de00c5ceaa3fdf4566a9822ce94abe676f68b17a6ae11c453e14455fd00000000000000000000000000000000000000000000000000000000000080050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010005215fda00bfbf95847a13078bd16cdcb1b875534261c1dda9940c7754fe00000000000000000000000000000000000000000000000000000000000080060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010002b97ebf3c481ead775617590ffca139bee428e443aa49eb38b6a5b8365700000000000000000000000000000000000000000000000000000000000080080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010000695a1e821b6d5fcb25e25793b81de0bdca3ff8277e3ac93a38e729e0a100000000000000000000000000000000000000000000000000000000000080090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010001039329e4bb55b24531c7e7d27ed40d2c82ad145033fdd5ed5b8ea86cf3000000000000000000000000000000000000000000000000000000000000800a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010001b3f2c3a6bdd5ad00ae29a7cbbb32dca3c31fb608b5cd52f8f3056a3847000000000000000000000000000000000000000000000000000000000000800b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010007d1e53f2dca05f7e27ae5b7062291ed3a1470ca511140b8e786aae7eb77000000000000000000000000000000000000000000000000000000000000800c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000010000159a3a08da3ac57cdefec0e9e30da60456bc5643134cf16d6957bcf1ac000000000000000000000000000000000000000000000000000000000000800d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000001000179842b5aa1c76036f5b90652fe614dacb28438a89649d6ca48131bd402000000000000000000000000000000000000000000000000000000000000800e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000001000055c1f27b8316ba61bf07959b11cf3b2a418aa357ccc5531c0914a2da27000000000000000000000000000000000000000000000000000000000000800f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100000f248e111a1b587fef850dc4585c39af2dd505bc8a0d5cc6d3fcc7ed3c00000000000000000000000000000000000000000000000000000000000080100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000001000023b02bbb21baf1367835e56ae17b82688527dc8f78caf34b12e670ee6500000000000000000000000000000000000000000000000000000000000080120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100001169cd6aa311c1bc9bbe2e7dd085720c96bb197e3223be7e9c66e46ef900000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000001000049eb6d79244e74e5286ed4d3f6eef2b5eb746b67d98691dbc28fa1698400000000000000000000000000000000000000000000000000000000000080110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000100004bc85f45ebf0f0bf004752bcbff1bb99792d6cc6494227970ec77fe53b00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ac00000000000000000000000000000000000000000000000000000000000000144000000000000000000000000303a465b659cbb0ab36ee643ea362c509eeb5213000000000000000000000000c2ee6b6af7d616f6e27ce7f4a451aedc2b0f5f5c000000000000000000000000d7f9f54194c633f36ccd5f3da84ad4a1c38cb2cb0000000000000000000000000b622a2061eaccae1c664ebc3e868b8438e03f610000000000000000000000005d8ba173dc6c3c90c8f7c04c9288bef5fdbad06e00000000000000000000000000000000000000000000000000000000";

    const mainDecoded = diamond.decodeFunctionData(Buffer.from(hexToBytes(callData)), z.any())
    const newFacets = [
      ...currentFacets.map(facet => ({
        facet: zeroAddress,
        action: 2,
        isFreezable: false,
        selectors: facet.selectors,
      })),
      {
        facet: "0x230214F0224C7E0485f348a79512ad00514DB1F7",
        action: 0,
        isFreezable: false,
        selectors: [
          "0x0e18b681",
          "0xe58bb639",
          "0x64bf8d66",
          "0xa9f6d941",
          "0x27ae4c16",
          "0x4dd18bf5",
          "0xf235757f",
          "0x1cc5d103",
          "0xbe6f11cf",
          "0x4623c91d",
          "0x17338945"
        ],
      },
      {
        "facet": "0xA57F9FFD65fC0F5792B5e958dF42399a114EC7e7",
        "selectors": [
          "0x6c0960f9",
          "0xb473318e",
          "0x042901c7",
          "0x263b7f8e",
          "0xe4948f43",
          "0xeb672419"
        ],
        "action": 0,
        "isFreezable": true
      }
    ]

    const initAddress = mainDecoded.args[0].initAddress
    const initCalldata = mainDecoded.args[0].initCalldata

    const abi = await explorer.getAbi(initAddress)

    const initDecoded = abi.decodeCallData(initCalldata, z.any())

    console.log(initDecoded.args[0])
    const newInitCalldata = {
      ...initDecoded.args[0],
      newProtocolVersion: numberToHex(107374182401n, { size: 32 }),
      verifier: "0x0000000000000000000000000000000000000011",
      l2ProtocolUpgradeTx: {
        ...initDecoded.args[0].l2ProtocolUpgradeTx,
        nonce: numberToHex(25, { size: 32 })
      }
    }

    const newInit = abi.encodeCallData(initDecoded.functionName, [newInitCalldata])

    const newCalldata = diamond.encodeFunctionData(mainDecoded.functionName, [
      {
        ...mainDecoded.args[0],
        initCalldata: newInit,
        facetCuts: newFacets
      }
    ])

    // console.log(newCalldata.length, callData.length)
    console.log(newCalldata)

    // const coso = await rpc.debugTraceCall(
    //   "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
    //   callAddr,
    //   newCalldata
    // )
    //
    // console.log(coso)
  })

  it("DELETEME 2", () => {
    const bytes = numberToBytes(103079215105n)
    bytes[0] = bytes[0] + 1
    // bytes[5] = 0
    // const preffix = new Uint8Array([1, 0, 0, 0])
    // console.log(bytes)
    // console.log(bytesToBigInt(Buffer.concat([preffix, bytes])))
    console.log(bytesToBigInt(bytes))
  })
});

